<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" creationComplete="init()" width="240" height="240" frameRate="30" backgroundColor="#1D1D1C">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
		
	</fx:Declarations>

	
	<fx:Script>
		<![CDATA[
        	import org.as3wavsound.WavSound;
        	import org.as3wavsound.WavSoundChannel;
        	import org.bytearray.micrecorder.MicRecorder;
        	import org.bytearray.micrecorder.encoder.WaveEncoder;
        	import org.bytearray.micrecorder.events.RecordingEvent;
        	import fr.kikko.lab.ShineMP3Encoder;
            import com.adobe.images.JPGEncoder;            
            import ru.inspirit.net.MultipartURLLoader;
            import flash.events.Event;
            import flash.events.IOErrorEvent;
            import flash.system.Security;

            import flash.external.ExternalInterface;
            //import mx.core.FlexGlobals;
			private var soundBytes:ByteArray = new ByteArray();
			private var _file:FileReference; 
			private var mymic:Microphone;
			private var playback_channel:WavSoundChannel;
			private var micTimer:Timer;
			private var playTimer:Timer;
            private var preparationTimer:Timer;
            //private var stillTimer:Timer;
            private var flashTimer:Timer;
            private var uploaderTimer:Timer;
            private var playing:Boolean;
            private var prep_counter:Number;
            private var volume:Number = .5;
            private var wavEncoder:WaveEncoder = new WaveEncoder( volume );
            private var recorder:MicRecorder;
    		private var sound:WavSound; //WavSound
    		private var record_len:Number;
    		private var recording_seconds:Number;
    		private var mp3Encoder:ShineMP3Encoder;
    		private var _bitmapData:BitmapData;
    		private var _flash_bmp:Bitmap;
    		private var photo_jpg:ByteArray;
    		private var jpegEncoder:JPGEncoder= new JPGEncoder(80);
    		private var camera:Camera;
            private var video:Video;
            private var still:Bitmap;
            private var photo_bm:Bitmap;
            private var camw:Number;
            private var camh:Number;
            private var sound_position:Number;
            
            
			private function init():void {
                _display.visible=false;
			    //Security.loadPolicyFile(server_path+'crossdomain.php');
                camw=240;
                camh=240;
                var format:TextFormat = new TextFormat();
                format.font = "Arial";
                format.color = '0xffffff';
                format.size = 12;
                format.bold = true;
                format.underline = false;
    
                format = new TextFormat();
                format.font = "Arial";
                format.color = '0xE0460E';
                format.size = 64;
                format.bold = true;
                format.underline = false;
    				
				_flash_bmp=new Bitmap(new BitmapData(camw,camh,false, 0xaaFF88));
				sound_position=0;
                playing=false;
				
                playTimer = new Timer(50);
                playTimer.addEventListener(TimerEvent.TIMER, _showPlayProgress);

                // Taking team photos 
                ExternalInterface.addCallback("initCamera", initCamera);
                ExternalInterface.addCallback("keepPhoto", keepPhoto);

                // recording team notes
                ExternalInterface.addCallback("initMic", initMic);
                ExternalInterface.addCallback("startRecording", startRecording);
                ExternalInterface.addCallback("stopRecording", stopRecording);
                ExternalInterface.addCallback("startPlaying", startPlaying);
                ExternalInterface.addCallback("stopPlaying", stopPlaying);
                ExternalInterface.addCallback("movePlaybackToPosition", movePlaybackToPosition);
                ExternalInterface.addCallback("cancelRecording", cancelRecording);
                ExternalInterface.addCallback("redoRecording", redoRecording);
                ExternalInterface.addCallback("saveRecording", saveRecording);
                _display.text='Recorder initialized.';
                ExternalInterface.call("recorder_initialized");
			}
			

			private function initCamera():void {
                // get Camera
                video= new Video(camw,camh);
                camera = Camera.getCamera();

                function statusHandler(event:StatusEvent):void { 
                    _display.text='Statusevent '+event.code;

                    switch (event.code) { 
                        case "Camera.Muted":
                            _display.text='Camera denied'; 
                            ExternalInterface.call("camera_denied"); 
                            break; 
                        case "Camera.Unmuted": 
                            _display.text='Camera accepted'; 
                            ExternalInterface.call("camera_accepted"); 
                            break; 
                    } 
                }
                if (camera) {
                    _display.text='Asking permission to use camera...';
                    camera.addEventListener(StatusEvent.STATUS, statusHandler)
                    camera.setMode(camw,camh,12,false);
                    camera.setQuality(0,100);
                    video.attachCamera(camera);
                    if (!camera.muted) {
                        _display.text='Camera always accepted'; 
                        ExternalInterface.call("camera_accepted"); 
                    }
                }
                uic.addChild(video);
                flashTimer=new Timer(10,1);
                flashTimer.addEventListener(TimerEvent.TIMER_COMPLETE, _addStill);
			}

            private function takePhoto():void {
                flashTimer.reset();                
                flashTimer.start(); // --> _addStill
                _switchStill(_flash_bmp)
                still_screen.visible=true;
                _bitmapData=new BitmapData(camw, camh);
                _bitmapData.draw(video);
                video.visible=false;

                //ExternalInterface.call("tookGroupPhoto");
            }

            // is called by flashTimer after photo has been taken
            private function _addStill(e:TimerEvent):void {
                photo_bm=new Bitmap(_bitmapData);
                _switchStill(photo_bm);
                video.visible=false;
                still_screen.visible=true;
                photo_jpg = jpegEncoder.encode(_bitmapData);
                _bitmapData=null;
            }

			private function _switchStill(bmp:Bitmap):void {
                if (still!=null) {
                    if (still_screen.contains(still)) {
                        still_screen.removeChild(still);
                    }
                }
                still = bmp;
                still_screen.addChild(still);
			}


            private function initMic():void {
				// Get Microphone
				mymic = Microphone.getMicrophone();
				mymic.rate = 22;
				mymic.setSilenceLevel(0);				
				mymic.setUseEchoSuppression(true);
				mymic.soundTransform = new SoundTransform(0,0);
				mymic.setLoopBack(true);
				
				recorder= new MicRecorder( wavEncoder, mymic );
    			recorder.addEventListener(RecordingEvent.RECORDING, _onRecording);
    			recorder.addEventListener(Event.COMPLETE, _onRecordComplete);

				prep_counter=3;
                preparationTimer = new Timer(1000,prep_counter);
                preparationTimer.addEventListener(TimerEvent.TIMER, _prepareAnnouncement);
                preparationTimer.addEventListener(TimerEvent.TIMER_COMPLETE, _prepareComplete);                
				micTimer = new Timer(100);
				micTimer.addEventListener(TimerEvent.TIMER, _miclevel);
				micTimer.start();
            }

			
			// Recording 
			
			private function startRecording():void {
                // make sure that vumeter is on
                micTimer.start(); // --> _miclevel
                // start preparations
                prep_counter=3;
    		    _display.text = 'Prepare...'
    		    preparationTimer.reset();
    		    recording_seconds=0;
                // if there is a previous still, clean it out and grap camera again
                still_screen.visible=false;
                video.visible=true;
                preparationTimer.start(); // --> _prepareAnnouncement, _prepareComplete
			}
			
			private function _prepareAnnouncement(e:TimerEvent):void {
    		    prep_counter--;
                ExternalInterface.call("countdown", prep_counter);

			}

            private function _prepareComplete(e:TimerEvent):void {
                takePhoto();
                recorder.record();
            }

			
			private function stopRecording():void {
			    recorder.stop();
                video.visible=false;
                // stop timers 
                micTimer.stop();
                sound_position=0;
                playTimer.reset();
                still_screen.visible=true;
			}


            private function _showPlayProgress(e:TimerEvent):void {
                sound_position=playback_channel.position;
                ExternalInterface.call("playback_timer", sound_position);
            }


            private function startPlaying():void {    

    			function _autoStopPlaying(e:Event):void {
                    sound_position=0;
                    stopPlaying();
    			}
    			if (camera) {
        			still_screen.visible=true;  
    			}  			
    			playTimer.start();

    			micTimer.stop();
                playing=true;
    			playback_channel=sound.play(sound_position);
    			_display.text = 'Playback started...';
    			playback_channel.addEventListener(Event.SOUND_COMPLETE, _autoStopPlaying);
            }

            private function stopPlaying():void {
                playTimer.stop();                
                _display.text='Stopped.';
                playback_channel.stop();
                ExternalInterface.call("stopped_playing");
                playing=false;
            }

            private function movePlaybackToPosition(p:Number):void {
                if (p < sound.length) {
                    sound_position=p;
                } else {
                    sound_position=sound.length;
                }
                if (playing) {
                    playback_channel.stop();
                    playback_channel=sound.play(sound_position);
                }
            }

            private function cancelRecording():void {

            }
            private function redoRecording():void {
                startRecording();
            }
            private function saveRecording(server_path:String, class_name:String, group_name:String ): void {
                _display.text = 'Sending audio file...';                

                var ml:MultipartURLLoader = new MultipartURLLoader();
                ml.addEventListener(Event.COMPLETE, onReady);
                //ml.addEventListener(ProgressEvent.PROGRESS, onProgress);              
                ExternalInterface.call("uploading_recording");
                                
                function onReady(e:Event):void {
                    // notify teamup that we are done
            		ExternalInterface.call("finished_recording", ml.loader.data);
                }
                function onError(evt:IOErrorEvent):void {
                    _display.text="error:"+evt;
                    //ExternalInterface.call("photo_error", "error:"+evt);
                };
                function forceFinish(event : Event) : void {
                    // if the MultipartURLLoader hasn't responded in 20 seconds, assume that its return message is messed up
                    // and the files are there. Send end notification.
            		ExternalInterface.call("finished_recording", ml.loader.data);
                }
            
        		function onProgress(event : ProgressEvent) : void {
        		    //encoding.label='Sending...';
                    encoding_container.visible=true;
        		    encoding.label=''+event.bytesLoaded;
        		    encoding.setProgress(event.bytesLoaded,100);
        		}

                // simple string data
                ml.addVariable('class_id', class_name);
                ml.addVariable('record_id', group_name);
                if (photo_jpg) {
                    ml.addFile(photo_jpg, 'photo.jpg', 'photo', 'image/jpeg'); 
                }           
                ml.addFile(mp3Encoder.mp3Data, 'voice.mp3', 'voice', 'audio/mpeg');                 

                try {
                    ml.load(server_path+"varloader.php", false);  
                } catch (error:Error) {
                    _display.text= error.message + error.toString();
                } finally {};
                
				uploaderTimer = new Timer(10000);
				uploaderTimer.addEventListener(TimerEvent.TIMER, forceFinish);
                uploaderTimer.reset();                      
                uploaderTimer.start();                      
            }
            private function keepPhoto(server_path:String, class_name:String, group_name:String ) : void {
                _display.text = 'Sending team photo...';                
                var ml:MultipartURLLoader = new MultipartURLLoader();
                ml.addEventListener(Event.COMPLETE, onReady);
                function onReady(e:Event):void {
                    // notify teamup that we are done
                    ExternalInterface.call("sentGroupPhoto", class_name+'/'+group_name);
                }
                function onError(evt:IOErrorEvent):void {
                    _display.text="error:"+evt;
                    //ExternalInterface.call("photo_error", "error:"+evt);
                };
                function forceFinish(event : Event) : void {
                    // if the MultipartURLLoader hasn't responded in 20 seconds, assume that its return message is messed up
                    // and the files are there. Send end notification.
                    ExternalInterface.call("sentGroupPhoto", class_name+'/'+group_name);
                }            
                ml.addVariable('class_id', class_name);
                ml.addVariable('record_id', group_name);                
                ml.addFile(photo_jpg, 'photo.jpg', 'photo', 'image/jpeg');
                try {
                    ml.load(server_path+"varloader.php", false);  
                } catch (error:Error) {
                    _display.text= error.message + error.toString();
                } finally {};
                
                uploaderTimer = new Timer(10000);
                uploaderTimer.addEventListener(TimerEvent.TIMER, forceFinish);
                uploaderTimer.start();                      
            }
            


            // this should be the only function to use those path parameters 

			
			
			private function _miclevel(event:TimerEvent):void {
                ExternalInterface.call("audio_level", mymic.activityLevel);
			}

    		private function _onRecording(event:RecordingEvent):void {
    			_display.text = "Recording : " + (event.time/1000).toFixed(1) + " s.";
                if (event.time>60000) {
                    stopRecording();
                }
    			if (Math.floor(event.time/100)>recording_seconds) {
    			    recording_seconds++;
                    ExternalInterface.call("recording_timer", recording_seconds);
    			}
    			record_len=event.time;
    		}
			
    		private function _onRecordComplete(event:Event):void {
                ExternalInterface.call("recording_stopped");
    			_display.text = "Record : " + (record_len/1000).toFixed(1) + " s.";
        		function _mp3EncodeProgress(event : ProgressEvent) : void {
        		    encoding.setProgress(event.bytesLoaded,100);
        		}        
        		function _mp3EncodeError(event : ErrorEvent) : void {    			
        			_display.text = 'Encode error:' + event.text;
        		}
    			function _mp3EncodeComplete(event : Event) : void {
                    mp3Encoder.removeEventListener(ProgressEvent.PROGRESS, _mp3EncodeProgress);
        			mp3Encoder.removeEventListener(Event.COMPLETE, _mp3EncodeComplete);
        			mp3Encoder.removeEventListener(ErrorEvent.ERROR, _mp3EncodeError);
                    _display.text = 'Finished: ' + (mp3Encoder.mp3Data.length/1024).toFixed(1)+' kb.';
                    encoding_container.visible=false;
        			sound = new WavSound(recorder.output);
            		ExternalInterface.call("encoding_complete");
    			}
			    mp3Encoder = new ShineMP3Encoder(recorder.output);
    			mp3Encoder.addEventListener(Event.COMPLETE, _mp3EncodeComplete);
    			mp3Encoder.addEventListener(ProgressEvent.PROGRESS, _mp3EncodeProgress);
    			mp3Encoder.addEventListener(ErrorEvent.ERROR, _mp3EncodeError);
    			mp3Encoder.start();						
                encoding_container.visible=true;
            }

		]]>
	</fx:Script>

    <mx:UIComponent id="uic" x="0" y="0" width="240" height="240" />
    <mx:UIComponent id="still_screen" x="0" y="0" width="240" height="240" visible="false">
	</mx:UIComponent>	    
	<mx:Label color="0xffffff" x="10" y="10" id="_display" visible="false" text="00:00:00"/>
	<mx:Label color="0xffffff" x="10" y="100" id="_error" visible="false" text=""/>
    <mx:Box id="encoding_container" visible="false" x="0" y="60" width="240" height="40" backgroundColor="#444444" alpha="1">
	<mx:ProgressBar id="encoding" x="40" y="0" width="240" mode="manual" label="Encoding..." fontSize="10" color="0xdddddd"/>
	</mx:Box>
	
	
</s:Application>

